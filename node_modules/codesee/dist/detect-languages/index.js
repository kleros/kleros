"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runDetectLanguages = void 0;
const chalk_1 = __importDefault(require("chalk"));
const langs_1 = __importDefault(require("../map/langs"));
const fs_1 = require("../utils/fs");
const git_1 = require("../map/git");
const git_2 = require("../utils/git");
const env_1 = __importDefault(require("../utils/env"));
exports.default = register;
function register(program) {
    program
        .command("detect-languages")
        .description("detect languages used in this repository")
        .arguments("[repoRoot]")
        .action(detectLanguages);
}
async function detectLanguages(...args) {
    try {
        await runDetectLanguages(args);
    }
    catch (err) {
        if (err instanceof Error) {
            console.error(`\n${chalk_1.default.red(`Error: ${err.message}`)}`);
            console.error(err.stack);
        }
        // Log an empty object to stdout in case the main workflow
        // continues to run.
        console.log(JSON.stringify({}));
        process.exit(1);
    }
}
async function runDetectLanguages(args) {
    const repoDir = args[0] || (await fs_1.getCurrentDirectory());
    // Check that the directory that was passed in exists.
    // This only checks the existence. If we do not have read
    // access, then it will fail downstream returning a more
    // specific error related to what we do no have read permissions
    // on
    if (!(await fs_1.canAccess(repoDir))) {
        const message = `Unable to find ${repoDir}`;
        console.error(`\n${chalk_1.default.red(message)}`);
        // Log an empty object to stdout in case the main workflow
        // continues to run.
        console.log(JSON.stringify({}));
        if (env_1.default.withExitCodes) {
            throw new Error(message);
        }
        return;
    }
    const repoRoot = await git_2.determineRepoRoot(repoDir);
    const allFileRootRelPaths = await git_1.runLsTreeForPackage(repoRoot, repoRoot);
    const packages = await git_1.enumeratePackages(langs_1.default.specs, repoRoot, allFileRootRelPaths, undefined);
    const output = {};
    for (const [lang, packageDirectories] of Object.entries(packages)) {
        output[lang] = packageDirectories.length > 0;
    }
    console.log(JSON.stringify(output));
}
exports.runDetectLanguages = runDetectLanguages;
