"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureDirExists = exports.mkdir = exports.writeFile = exports.dirnameOrUndefined = exports.getCurrentDirectory = exports.canAccessSync = exports.canAccess = exports.ensureNoTrailingSlash = exports.ensureTrailingSlash = void 0;
const fs_1 = require("fs");
const fs_2 = require("fs");
const fs_3 = __importDefault(require("fs"));
const path = __importStar(require("path"));
function ensureTrailingSlash(f) {
    return f[f.length - 1] !== "/" ? f + "/" : f;
}
exports.ensureTrailingSlash = ensureTrailingSlash;
function ensureNoTrailingSlash(f) {
    return f[f.length - 1] !== "/" ? f : f.slice(0, -1);
}
exports.ensureNoTrailingSlash = ensureNoTrailingSlash;
async function canAccess(filename) {
    try {
        await fs_1.promises.access(filename, fs_2.constants.R_OK);
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.canAccess = canAccess;
function canAccessSync(filename) {
    try {
        fs_3.default.accessSync(filename, fs_2.constants.R_OK);
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.canAccessSync = canAccessSync;
async function getCurrentDirectory() {
    return process.cwd();
}
exports.getCurrentDirectory = getCurrentDirectory;
function dirnameOrUndefined(fullPath) {
    const dir = path.dirname(fullPath);
    if (dir === ".") {
        return undefined;
    }
    if (dir === "/") {
        return undefined;
    }
    return dir;
}
exports.dirnameOrUndefined = dirnameOrUndefined;
exports.writeFile = fs_1.promises.writeFile;
exports.mkdir = fs_1.promises.mkdir;
async function ensureDirExists(filepath) {
    if (await canAccess(filepath)) {
        return;
    }
    await exports.mkdir(filepath, { recursive: true });
}
exports.ensureDirExists = ensureDirExists;
