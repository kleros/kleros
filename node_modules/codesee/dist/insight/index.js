"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runInsight = void 0;
const commander_1 = __importDefault(require("commander"));
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const fs_1 = require("fs");
const insights_1 = __importDefault(require("./insights"));
const shared_constants_1 = require("@codesee/shared-constants");
const which_1 = require("../utils/which");
const git_1 = require("../utils/git");
const env_1 = __importDefault(require("../utils/env"));
const { canAccess, getCurrentDirectory } = require("../utils/fs");
const { determineRepoRoot } = require("../utils/git");
exports.default = register;
function register(program) {
    program
        .command("insight")
        .description("generate the data for an insight")
        .arguments("[repoRoot]")
        .option("-o, --output <outputFilename>", "File to write")
        .addOption(new commander_1.default.Option("-i, --insightType <insightType>", "The type of insight to generate")
        .choices(shared_constants_1.AVAILABLE_INSIGHTS)
        .makeOptionMandatory())
        .action(insight);
}
async function insight(...args) {
    try {
        await runInsight(...args);
    }
    catch (err) {
        if (err instanceof Error) {
            console.log(`\n${chalk_1.default.red(`Error: ${err.message}`)}`);
            console.log(err.stack);
        }
        process.exit(1);
    }
}
async function runInsight(...args) {
    const repoDir = args[0] || (await getCurrentDirectory());
    const opts = args[1] || {};
    // Check that the directory that was passed in exists.
    // This only checks the existence. If we do not have read
    // access, then it will fail downstream returning a more
    // specific error related to what we do no have read permissions
    // on
    if (!(await canAccess(repoDir))) {
        const message = `Unable to find ${repoDir}`;
        console.log(`\n${chalk_1.default.red(message)}`);
        if (env_1.default.withExitCodes) {
            throw new Error(message);
        }
        return;
    }
    const repoRoot = await determineRepoRoot(repoDir);
    const lineCounterExecutable = await which_1.which("wc");
    const lineCounter = `${lineCounterExecutable} -l`;
    const binaryDetectorExecutable = await which_1.which("file");
    const binaryDetector = `${binaryDetectorExecutable} --mime-encoding --brief`;
    const insightType = opts.insightType;
    const insightFunction = insights_1.default.get(insightType);
    if (!insightFunction) {
        throw new Error(`Insight type ${insightType} is not implemented yet`);
    }
    const filesToProcess = await enumerateFiles(repoRoot);
    const fileBatches = partition(filesToProcess, 10);
    // We need any here because any[][] doesn't seem to have flat()
    const insightData = await Promise.all(fileBatches.map((batch) => processBatch(repoRoot, batch, insightFunction, {
        repoRoot,
        lineCounter,
        binaryDetector,
    })));
    const strData = toJson(insightType, insightData.flat());
    if (opts.output) {
        await fs_1.promises.writeFile(opts.output, strData);
    }
    else {
        console.log(strData);
    }
}
exports.runInsight = runInsight;
async function processBatch(repoRoot, batch, insightFunction, insightFunctionOptions) {
    const batchResults = [];
    for (const relPath of batch) {
        if (relPath.length === 0) {
            continue;
        }
        const filePath = path.resolve(repoRoot, relPath);
        if (await canAccess(filePath)) {
            const result = await insightFunction(filePath, insightFunctionOptions);
            batchResults.push([relPath, result]);
        }
    }
    return batchResults;
}
function toJson(insightType, data) {
    const obj = Object.create(null);
    for (const [key, value] of data) {
        obj[key] = value;
    }
    const results = {
        collectedAt: new Date().toISOString(),
        insightType,
        data: obj,
    };
    return JSON.stringify(results);
}
function partition(arr, numberOfChunks) {
    const chunkSize = arr.length / numberOfChunks;
    const chunks = [];
    for (let i = 0; i < arr.length; i += chunkSize) {
        chunks.push(arr.slice(i, i + chunkSize));
    }
    return chunks;
}
async function enumerateFiles(packageDir) {
    const results = await git_1.execGit(packageDir, "ls-tree", "-r", "HEAD", "--name-only", packageDir);
    return results.split("\n");
}
