"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_constants_1 = require("@codesee/shared-constants");
const git_1 = require("../../utils/git");
const mapping = [
    [shared_constants_1.INSIGHTS.LAST_COMMIT_DATE, getLastCommit],
    [shared_constants_1.INSIGHTS.COMMIT_COUNT_LAST_30_DAYS, getCommitCountFor30Days],
    [shared_constants_1.INSIGHTS.CREATE_DATE, getFirstCommit],
];
exports.default = mapping;
async function getFirstCommit(filePath, options) {
    if (!options.repoRoot) {
        return Promise.reject(new Error("repo root not defined"));
    }
    return await getTopCommit(options.repoRoot, filePath, true /* reversed */);
}
async function getLastCommit(filePath, options) {
    if (!options.repoRoot) {
        return Promise.reject(new Error("repo root not defined"));
    }
    return await getTopCommit(options.repoRoot, filePath, false /* not reversed */);
}
async function getTopCommit(repoRoot, filePath, reversed) {
    const args = ["--no-pager", "log", "--pretty=tformat:%cI"];
    if (reversed) {
        args.push("--reverse");
    }
    args.push("--", filePath);
    return (await git_1.execGit(repoRoot, ...args)).split("\n")[0]; // We only care about the first result since that's the latest
}
async function getCommitCountFor30Days(filePath, options) {
    if (!options.repoRoot) {
        return Promise.reject(new Error("repo root not defined"));
    }
    const results = await git_1.execGit(options.repoRoot, "--no-pager", "log", "--since=30 days ago", "--pretty=tformat:%cI", "--", filePath);
    // filter handles empty lines which we don't want to count
    return results.split("\n").filter((x) => x).length;
}
