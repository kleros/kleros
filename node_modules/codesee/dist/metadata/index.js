"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const api_token_1 = require("../utils/api_token");
const fs_1 = require("fs");
const axios_1 = __importDefault(require("axios"));
const env_1 = __importDefault(require("../utils/env"));
exports.default = register;
function register(program) {
    program
        .command("metadata")
        .description("get information about different pieces of the CodeSee ecosystem")
        .option("-o, --output <outputFilename>", "File to write")
        .option("-u, --url <server>", "url for the codesee instance", "https://app.codesee.io")
        .option("-a, --apiToken <token>", "API key for communicating with the server")
        .requiredOption("-r, --repo <repository>", "The repository you are querying for metadata")
        .action(metadata);
}
async function metadata(...args) {
    try {
        await runMetadata(args);
    }
    catch (err) {
        console.error(`\n${chalk_1.default.red(`Error: ${err.message}`)}`);
        console.error(err.stack);
        // Log an empty object to stdout in case the main workflow
        // continues to run.
        console.log(JSON.stringify({}));
        process.exit(1);
    }
}
async function runMetadata(args) {
    const opts = args[0];
    const apiToken = api_token_1.apiKeyFromEnvOrOpts(opts);
    if (!apiToken)
        throw new Error("an Api Token is required for metadata fetching");
    const metadata = await fetchMetadata(opts.url, apiToken, opts.repo);
    const strData = JSON.stringify(metadata);
    if (opts.output) {
        await fs_1.promises.writeFile(opts.output, strData);
    }
    else {
        console.log(strData);
    }
}
async function fetchMetadata(serverUrl, apiToken, repoOrigin) {
    if (!repoOrigin.startsWith("https://github.com/")) {
        const message = `Unable to determine repo name from ${repoOrigin}`;
        console.log(`\n${chalk_1.default.red(message)}`);
        if (env_1.default.withExitCodes) {
            throw new Error(message);
        }
        return;
    }
    const repoName = repoOrigin.substring("https://github.com/".length);
    console.log(`${chalk_1.default.white(`Fetching metadata for ${repoName} on ${serverUrl}`)}`);
    // Note: we must use encodeURIComponent here so that the forward slash in repoName is URI encoded
    const endpoint = `${serverUrl}/api/maps/repos/${encodeURIComponent(repoName)}/metadata`;
    const headers = {
        Authorization: `Bearer ${apiToken}`,
    };
    // by default axios throws on non 2xx results
    try {
        const result = await axios_1.default({
            url: endpoint,
            method: "GET",
            headers,
            withCredentials: true,
        });
        console.log(`${chalk_1.default.whiteBright("Fetch successful")}`);
        return result.data;
    }
    catch (err) {
        console.log(chalk_1.default.red(err));
        if (env_1.default.withExitCodes) {
            throw err;
        }
        return;
    }
}
