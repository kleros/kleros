"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const env_1 = __importDefault(require("../utils/env"));
const chalk = require("chalk");
const axios = require("axios");
const fs = require("fs").promises;
const { AVAILABLE_INSIGHTS } = require("@codesee/shared-constants");
exports.default = () => ["insight", handler];
async function handler(dataFile, apiToken, serverUrl, opts) {
    if (!opts.repo)
        throw new Error("--repo is required for the insight data type");
    const uploadData = JSON.parse(await fs.readFile(dataFile));
    if (AVAILABLE_INSIGHTS.indexOf(uploadData.insightType) === -1) {
        throw new Error(`${uploadData.insightType} is not supported`);
    }
    await uploadInsightToServer(uploadData.data, uploadData.collectedAt, opts.repo, uploadData.insightType, apiToken, serverUrl);
}
async function uploadInsightToServer(data, collectedAt, repoOrigin, insightType, apiToken, serverUrl) {
    if (!repoOrigin.startsWith("https://github.com/")) {
        const message = `Unable to determine repo name from ${repoOrigin}`;
        console.log(`\n${chalk.red(message)}`);
        if (env_1.default.withExitCodes) {
            throw new Error(message);
        }
        return;
    }
    const repoName = repoOrigin.substring("https://github.com/".length);
    console.log(`${chalk.white(`Uploading ${repoName}:${insightType} to ${serverUrl}`)}`);
    // Note: we must use encodeURIComponent here so that the forward slash in repoName is URI encoded
    const endpoint = `${serverUrl}/api/maps/repos/${encodeURIComponent(repoName)}/insights/${encodeURIComponent(insightType)}`;
    const body = {
        data,
        collectedAt,
    };
    const headers = {
        Authorization: `Bearer ${apiToken}`,
    };
    // by default axios throws on non 2xx results
    try {
        await axios({
            url: endpoint,
            method: "PUT",
            data: body,
            headers,
            withCredentials: true,
        });
        console.log(`${chalk.whiteBright("Uploaded successfully")}`);
    }
    catch (err) {
        console.log(chalk.red(err));
    }
}
