"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const chalk_1 = __importDefault(require("chalk"));
const map_1 = __importDefault(require("./map"));
const insight_1 = __importDefault(require("./insight"));
const api_token_1 = require("../utils/api_token");
const dataTypeHandlerMap = new Map([
    map_1.default(),
    insight_1.default(),
]);
exports.default = register;
function register(program) {
    program
        .command("upload")
        .description("upload data to the codesee server")
        .arguments("<dataFile>")
        .addOption(new commander_1.default.Option("-t, --type <dataType>", "What type of data are you uploading?")
        .choices(["map", "insight"])
        .default("map")
        .makeOptionMandatory())
        .option("-u, --url <server>", "url for the codesee instance", "https://app.codesee.io")
        .option("-a, --apiToken <token>", "API key for communicating with the server")
        .option("-r, --repo <repository>", "The repository you are uploading data for")
        .option("-p, --pullRequestNumber <number>", "Pull request number if this data is associated with a pull request")
        .option("-b, --baseRef <ref>", "The git ref of the base branch if this data is associated with a pull request (refs/heads/<branch>)")
        .option("-s, --baseCommitHash <sha>", "The commit hash of the base branch if this data is associated with a pull request")
        .option("-f, --ref <ref>", "The git ref you are uploading data for (refs/heads/<branch> or refs/tags/<tag>)")
        .addOption(new commander_1.default.Option("--runner <runner type>", "The type of the runner")
        .choices(["github-actions", "hosted-cli-runner"])
        .default("github-actions"))
        .action(upload);
}
async function upload(...args) {
    try {
        await runUpload(args);
    }
    catch (err) {
        console.log(`\n${chalk_1.default.red(`Error: ${err.message}`)}`);
        process.exit(1);
    }
}
async function runUpload(args) {
    const [dataFile, opts] = args;
    // Inspect to check that we have an api key
    const apiToken = api_token_1.apiKeyFromEnvOrOpts(opts);
    const { type, url, ...remaining } = opts;
    const func = dataTypeHandlerMap.get(type);
    if (!func) {
        throw new Error(`Unknown upload type ${type}`);
    }
    return await func(dataFile, apiToken, url, remaining);
}
