"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSetWithFilesAndDirectories = exports.generateMissingGroups = void 0;
const path = __importStar(require("path"));
const fs_1 = require("../utils/fs");
function generateMissingGroups(nodes) {
    nodes
        .filter((n) => !n.isGroup && n.group === undefined)
        .forEach((n) => {
        n.group = fs_1.dirnameOrUndefined(n.key);
    });
    const groupSet = new Set(nodes.map((n) => n.group));
    const nodeKeys = new Set(nodes.map((n) => n.key));
    const toProcess = Array.from(groupSet.values());
    while (toProcess.length > 0) {
        const group = toProcess.pop();
        if (!group)
            continue;
        if (!nodeKeys.has(group)) {
            const parentGroup = fs_1.dirnameOrUndefined(group);
            nodes.push({
                key: group,
                name: path.basename(group) + "/",
                isGroup: true,
                group: parentGroup,
                isSubGraphExpanded: false,
            });
            nodeKeys.add(group);
            if (!groupSet.has(parentGroup)) {
                toProcess.push(parentGroup);
            }
        }
    }
}
exports.generateMissingGroups = generateMissingGroups;
/**
 * This takes in a set of file paths and then returns a new set with those files
 * and all parent directories.
 *
 * This does not modify the input set.
 *
 * @param files A set of file paths
 * @returns A new set with the file and directory paths
 */
function createSetWithFilesAndDirectories(files) {
    // We generate a new set so we don't modify the original set.
    const filesAndDirectories = new Set(files);
    for (const file of files.values()) {
        const parts = file.split("/");
        // We're doing length - 1 here because we don't need to process the file
        // itself at the end of the path.
        const length = parts.length - 1;
        // We go through and get all the parts up to the index, inclusive, and then
        // join them back together to create all the parent directories for a given
        // file. We don't have to worry about duplicates because we're using sets.
        for (let i = 0; i < length; i++) {
            const directory = parts.slice(0, i + 1).join("/");
            filesAndDirectories.add(directory);
        }
    }
    return filesAndDirectories;
}
exports.createSetWithFilesAndDirectories = createSetWithFilesAndDirectories;
