"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initCreateReactApp = void 0;
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const process_1 = __importDefault(require("process"));
const object_path_1 = require("object-path");
const { fileExists, formatList, installPackages, projectPackageJson, renderHandlebars, writeFile, } = require("./util");
const packagesToInstall = ["codesee", "react-app-rewired"];
const scriptsToReplace = ["start", "build"];
async function initCreateReactApp(version) {
    let warned = false;
    // Install packages
    const formattedPackages = formatList(packagesToInstall.map((pkg) => chalk_1.default.cyan(pkg)));
    console.log(`\nInstalling ${formattedPackages}...\n`);
    await installPackages(packagesToInstall, { dev: true });
    // Create config-overrides.js
    const renderData = {
        rulesIndex: version === 4 ? 1 : 2,
        oneOfIndex: version === 4 ? 2 : 1,
    };
    const renderedOverridesFile = await renderHandlebars("config-overrides.js.hbs", renderData);
    const overridesFilePath = path.join(process_1.default.cwd(), "config-overrides.js");
    const overridesFileExists = await fileExists(overridesFilePath);
    if (overridesFileExists) {
        console.log(`\n${chalk_1.default.yellow(`Warning: config-overrides.js already exists in this project. You should merge the following code snippet with your existing config-overrides.js:`)}\n\n${renderedOverridesFile}`);
        warned = true;
    }
    else {
        console.log(`\nCreating ${chalk_1.default.green(overridesFilePath)}.`);
        await writeFile(overridesFilePath, renderedOverridesFile);
    }
    // Replace react-scripts with react-app-rewired
    const pkg = await projectPackageJson();
    const scripts = scriptsToReplace.filter((script) => {
        // We only want to replace the scripts that exist and that mention
        // react-scripts.
        const cmd = object_path_1.get(pkg, `scripts.${script}`, null);
        if (!cmd) {
            return false;
        }
        return cmd.indexOf("react-scripts") !== -1;
    });
    if (scripts.length === 0) {
        console.log(`\n${chalk_1.default.gray("Not replacing any npm scripts because they don't include react-scripts.")}`);
    }
    else {
        const formattedScripts = formatList(scripts.map((script) => chalk_1.default.cyan(script)));
        console.log(`\nReplacing ${formattedScripts} npm scripts with react-app-rewired.`);
        scripts.forEach((script) => {
            const cmd = pkg.scripts[script];
            pkg.scripts[script] = cmd.replace("react-scripts", "react-app-rewired");
        });
        const packageJsonFilePath = path.join(process_1.default.cwd(), "package.json");
        await writeFile(packageJsonFilePath, JSON.stringify(pkg, null, 2) + "\n");
    }
    console.log(`\n${chalk_1.default.green("Successfully installed CodeSee!")}${warned
        ? chalk_1.default.yellow(" Refer back to any warnings mentioned above to make sure everything is set up properly.")
        : ""}`);
}
exports.initCreateReactApp = initCreateReactApp;
