var Black;
(function (Black) {
    // Black Series
    Black["L030"] = "#FAFAFB";
    Black["L050"] = "#F0F2F6";
    Black["L100"] = "#CDD3DF";
    Black["L200"] = "#97A0B8";
    Black["L300"] = "#535E79";
    Black["L400"] = "#273353";
    Black["L500"] = "#021443";
    Black["L700"] = "#010E34";
    Black["L900"] = "#01061E";
    Black["GITHUB"] = "#181717";
})(Black || (Black = {}));
var Primary;
(function (Primary) {
    // Primary Series (aka Purple!)
    Primary["L030"] = "#F9F8FD";
    Primary["L050"] = "#E7E5F2";
    Primary["L100"] = "#C4BDE0";
    Primary["L200"] = "#9D92CB";
    Primary["L300"] = "#7566B6";
    Primary["L400"] = "#5845A6";
    Primary["L500"] = "#3A2496";
    Primary["L700"] = "#361B83";
    Primary["L900"] = "#2A0D68";
})(Primary || (Primary = {}));
var Blue;
(function (Blue) {
    // Blue Series
    Blue["L030"] = "#F7FAFC";
    Blue["L050"] = "#E9F3FB";
    Blue["L100"] = "#C7E1F5";
    Blue["L200"] = "#A2CEEF";
    Blue["L300"] = "#60ABE4";
    Blue["L400"] = "#3B98DE";
    Blue["L500"] = "#1777C1";
    Blue["L700"] = "#005495";
    Blue["L900"] = "#003F70";
})(Blue || (Blue = {}));
var Magenta;
(function (Magenta) {
    // Magenta Series
    Magenta["L050"] = "#FBE0EC";
    Magenta["L100"] = "#F6B3CE";
    Magenta["L200"] = "#F080AE";
    Magenta["L300"] = "#EA4D8E";
    Magenta["L400"] = "#E62675";
    Magenta["L500"] = "#E1005D";
    Magenta["L700"] = "#BB0852";
    Magenta["L900"] = "#90003C";
})(Magenta || (Magenta = {}));
var Aqua;
(function (Aqua) {
    // Aqua Series
    Aqua["L030"] = "#F7FCFC";
    Aqua["L050"] = "#E9F7F6";
    Aqua["L100"] = "#C7F5F2";
    Aqua["L200"] = "#A2E5E3";
    Aqua["L300"] = "#64CECB";
    Aqua["L400"] = "#0FBEBE";
    Aqua["L500"] = "#00A1A1";
    Aqua["L700"] = "#007981";
    Aqua["L900"] = "#005062";
})(Aqua || (Aqua = {}));
var Yellow;
(function (Yellow) {
    // Yellow Series
    Yellow["L050"] = "#FFFBDC";
    Yellow["L100"] = "#FFEEA0";
    Yellow["L200"] = "#FFD978";
    Yellow["L300"] = "#FFC756";
    Yellow["L400"] = "#FFA722";
})(Yellow || (Yellow = {}));
var White;
(function (White) {
    White["L000"] = "#FFFFFF";
    White["TRANSPARENT"] = "#FFFFFF00";
})(White || (White = {}));
var LegendLight;
(function (LegendLight) {
    LegendLight["LIGHT_GRAY"] = "#E7E7E7";
    LegendLight["GRAY"] = "#C2C2C2";
    LegendLight["LIGHT_PURPLE"] = "#BACFF2";
    LegendLight["JADE_GREEN"] = "#C0ECD5";
    LegendLight["BEIGE"] = "#E8DCDE";
    LegendLight["LIGHT_TEAL"] = "#A5D5E2";
    LegendLight["SEA_GREEN"] = "#71D297";
    LegendLight["GRASS_GREEN"] = "#C3F179";
    LegendLight["LIGHT_LAVENDER"] = "#E1D8FC";
    LegendLight["TEAL"] = "#51A0B8";
    LegendLight["HUNTER_GREEN"] = "#4EA46B";
    LegendLight["BUTTER_YELLOW"] = "#F9E891";
    LegendLight["LAVENDER"] = "#B39EF8";
    LegendLight["OCEAN_BLUE"] = "#5687E0";
    LegendLight["CYAN"] = "#5CD6F1";
    LegendLight["GOLD_YELLOW"] = "#EDC700";
    LegendLight["ROSE"] = "#E897B1";
    LegendLight["BROWN"] = "#A27F4B";
    LegendLight["LIGHT_ROSE"] = "#F7CAC0";
    LegendLight["SCARLET"] = "#FF4646";
    LegendLight["HOT_PINK"] = "#F355A1";
    LegendLight["ORANGE"] = "#EF7C48";
    LegendLight["YELLOW_GREEN"] = "#E2E7B6";
    LegendLight["YELLOW_GREEN_DARK"] = "#93C9B2";
})(LegendLight || (LegendLight = {}));
var LegendDark;
(function (LegendDark) {
    LegendDark["PURPLE"] = "#6540DE";
    LegendDark["RUST"] = "#A24B59";
})(LegendDark || (LegendDark = {}));
var LegendTextColor;
(function (LegendTextColor) {
    LegendTextColor["LIGHT"] = "#ffffff";
    LegendTextColor["DARK"] = "rgba(0, 0, 0, .8)";
})(LegendTextColor || (LegendTextColor = {}));
var PRDiagramColor;
(function (PRDiagramColor) {
    PRDiagramColor["GREEN"] = "#AAE4B0";
    PRDiagramColor["ORANGE"] = "#FFCD82";
    PRDiagramColor["RED"] = "#FF98C3";
    PRDiagramColor["LIGHT_GREEN"] = "#D2EFD5";
    PRDiagramColor["LIGHT_ORANGE"] = "#FAE3BE";
    PRDiagramColor["LIGHT_RED"] = "#FCD1E4";
    PRDiagramColor["DARK_GREEN"] = "#008243";
    PRDiagramColor["DARK_RED"] = "#E10079";
})(PRDiagramColor || (PRDiagramColor = {}));
var PRReviewColors;
(function (PRReviewColors) {
    PRReviewColors["BLACK"] = "#24292f";
    PRReviewColors["GRAY"] = "hsl(210deg 18% 87%)";
    PRReviewColors["BLUE"] = "#ddf4ff";
    PRReviewColors["BLUE_WITH_EMPHASIS"] = "#54aeff66";
    PRReviewColors["BLUE_DARK"] = "#0969da";
    PRReviewColors["GREEN"] = "#ccffd8";
    PRReviewColors["GREEN_WITH_EMPHASIS"] = "#abf2bc";
    PRReviewColors["RED"] = "#ffebe9";
    PRReviewColors["RED_WITH_EMPHASIS"] = "rgba(255,129,130,0.4)";
})(PRReviewColors || (PRReviewColors = {}));
var Insight6StepColorScale;
(function (Insight6StepColorScale) {
    Insight6StepColorScale["VALUE_1"] = "#FFA722";
    Insight6StepColorScale["VALUE_2"] = "#FFD978";
    Insight6StepColorScale["VALUE_3"] = "#E2E7B6";
    Insight6StepColorScale["VALUE_4"] = "#93C9B2";
    Insight6StepColorScale["VALUE_5"] = "#60ABE4";
    Insight6StepColorScale["VALUE_6"] = "#1777C1";
})(Insight6StepColorScale || (Insight6StepColorScale = {}));
var Insight5StepColorScale;
(function (Insight5StepColorScale) {
    Insight5StepColorScale["VALUE_1"] = "#FFA722";
    Insight5StepColorScale["VALUE_2"] = "#FFD978";
    Insight5StepColorScale["VALUE_3"] = "#E2E7B6";
    Insight5StepColorScale["VALUE_4"] = "#60ABE4";
    Insight5StepColorScale["VALUE_5"] = "#1777C1";
})(Insight5StepColorScale || (Insight5StepColorScale = {}));
var BoxShadow;
(function (BoxShadow) {
    BoxShadow["CARD"] = "0px 4px 12px rgba(0, 0, 0, 0.1)";
})(BoxShadow || (BoxShadow = {}));

var SYSTEM_FONT_STACKS = "-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif";
var FontStack = {
    /**
     * Font family for elements in diagrams
     */
    DiagramElement: SYSTEM_FONT_STACKS,
};

var InsightMode;
(function (InsightMode) {
    InsightMode["UserInsights"] = "userInsights";
    InsightMode["LastCommit"] = "lastCommitDate";
    InsightMode["CreateDate"] = "createDate";
    InsightMode["CommitCountLast30Days"] = "commitCountLast30Days";
    InsightMode["LinesOfCode"] = "linesOfCode";
})(InsightMode || (InsightMode = {}));
var INSIGHTS = {
    LAST_COMMIT_DATE: InsightMode.LastCommit,
    COMMIT_COUNT_LAST_30_DAYS: InsightMode.CommitCountLast30Days,
    CREATE_DATE: InsightMode.CreateDate,
    LINES_OF_CODE: InsightMode.LinesOfCode,
};
var AVAILABLE_INSIGHTS = [
    INSIGHTS.LAST_COMMIT_DATE,
    INSIGHTS.COMMIT_COUNT_LAST_30_DAYS,
    INSIGHTS.CREATE_DATE,
    INSIGHTS.LINES_OF_CODE,
];

var tailwindConfig = {
    content: [],
    theme: {
        // Only allow our CodeSee colors
        colors: {
            "black-30": Black.L030,
            "black-50": Black.L050,
            "black-100": Black.L100,
            "black-200": Black.L200,
            "black-300": Black.L300,
            "black-400": Black.L400,
            "black-500": Black.L500,
            "black-700": Black.L700,
            "black-900": Black.L900,
            "primary-30": Primary.L030,
            "primary-50": Primary.L050,
            "primary-100": Primary.L100,
            "primary-200": Primary.L200,
            "primary-300": Primary.L300,
            "primary-400": Primary.L400,
            "primary-500": Primary.L500,
            "primary-700": Primary.L700,
            "primary-900": Primary.L900,
            "blue-30": Blue.L030,
            "blue-50": Blue.L050,
            "blue-100": Blue.L100,
            "blue-200": Blue.L200,
            "blue-300": Blue.L300,
            "blue-400": Blue.L400,
            "blue-500": Blue.L500,
            "blue-700": Blue.L700,
            "blue-900": Blue.L900,
            "aqua-30": Aqua.L030,
            "aqua-50": Aqua.L050,
            "aqua-100": Aqua.L100,
            "aqua-200": Aqua.L200,
            "aqua-300": Aqua.L300,
            "aqua-400": Aqua.L400,
            "aqua-500": Aqua.L500,
            "aqua-700": Aqua.L700,
            "aqua-900": Aqua.L900,
            "magenta-50": Magenta.L050,
            "magenta-100": Magenta.L100,
            "magenta-200": Magenta.L200,
            "magenta-300": Magenta.L300,
            "magenta-400": Magenta.L400,
            "magenta-500": Magenta.L500,
            "magenta-700": Magenta.L700,
            "magenta-900": Magenta.L900,
            "yellow-50": Yellow.L050,
            "yellow-100": Yellow.L100,
            "yellow-200": Yellow.L200,
            "yellow-300": Yellow.L300,
            "yellow-400": Yellow.L400,
            transparent: "transparent",
            white: "white",
            current: "currentColor",
        },
        extend: {
            "shadow-md": BoxShadow.CARD,
            borderRadius: {
                "3xl": "1.25rem",
                "4xl": "1.5rem",
            },
            outline: {
                primary: ["2px solid " + Primary.L500, "2px"],
            },
        },
    },
    plugins: [],
};

/*

DDDDDDDDDDDDD                  AAA               NNNNNNNN        NNNNNNNN        GGGGGGGGGGGGGEEEEEEEEEEEEEEEEEEEEEERRRRRRRRRRRRRRRRR
D::::::::::::DDD              A:::A              N:::::::N       N::::::N     GGG::::::::::::GE::::::::::::::::::::ER::::::::::::::::R
D:::::::::::::::DD           A:::::A             N::::::::N      N::::::N   GG:::::::::::::::GE::::::::::::::::::::ER::::::RRRRRR:::::R
DDD:::::DDDDD:::::D         A:::::::A            N:::::::::N     N::::::N  G:::::GGGGGGGG::::GEE::::::EEEEEEEEE::::ERR:::::R     R:::::R
  D:::::D    D:::::D       A:::::::::A           N::::::::::N    N::::::N G:::::G       GGGGGG  E:::::E       EEEEEE  R::::R     R:::::R
  D:::::D     D:::::D     A:::::A:::::A          N:::::::::::N   N::::::NG:::::G                E:::::E               R::::R     R:::::R
  D:::::D     D:::::D    A:::::A A:::::A         N:::::::N::::N  N::::::NG:::::G                E::::::EEEEEEEEEE     R::::RRRRRR:::::R
  D:::::D     D:::::D   A:::::A   A:::::A        N::::::N N::::N N::::::NG:::::G    GGGGGGGGGG  E:::::::::::::::E     R:::::::::::::RR
  D:::::D     D:::::D  A:::::A     A:::::A       N::::::N  N::::N:::::::NG:::::G    G::::::::G  E:::::::::::::::E     R::::RRRRRR:::::R
  D:::::D     D:::::D A:::::AAAAAAAAA:::::A      N::::::N   N:::::::::::NG:::::G    GGGGG::::G  E::::::EEEEEEEEEE     R::::R     R:::::R
  D:::::D     D:::::DA:::::::::::::::::::::A     N::::::N    N::::::::::NG:::::G        G::::G  E:::::E               R::::R     R:::::R
  D:::::D    D:::::DA:::::AAAAAAAAAAAAA:::::A    N::::::N     N:::::::::N G:::::G       G::::G  E:::::E       EEEEEE  R::::R     R:::::R
DDD:::::DDDDD:::::DA:::::A             A:::::A   N::::::N      N::::::::N  G:::::GGGGGGGG::::GEE::::::EEEEEEEE:::::ERR:::::R     R:::::R
D:::::::::::::::DDA:::::A               A:::::A  N::::::N       N:::::::N   GG:::::::::::::::GE::::::::::::::::::::ER::::::R     R:::::R
D::::::::::::DDD A:::::A                 A:::::A N::::::N        N::::::N     GGG::::::GGG:::GE::::::::::::::::::::ER::::::R     R:::::R
DDDDDDDDDDDDD   AAAAAAA                   AAAAAAANNNNNNNN         NNNNNNN        GGGGGG   GGGGEEEEEEEEEEEEEEEEEEEEEERRRRRRRR     RRRRRRR

This package will get published which means none of the data in here is secure. It should *not* be used to store secrets of ANY kind.

 */
///////////////////////////////// LOCAL STORAGE ////////////////////////////////
var LOCAL_STORAGE_AUTH_MODE_KEY = "CodeSee.authMode";
var LOCAL_STORAGE_RECORDING_ID_KEY = "CodeSee.recordingId";
var LOCAL_STORAGE_RECORDING_TIMESTAMP = "CodeSee.recordingTimestamp";
var LOCAL_STORAGE_WRITE_TOKEN_KEY = "CodeSee.writeToken";
var LOCAL_STORAGE_VERBOSE_KEY = "CodeSee.verboseData";
var LOCAL_STORAGE_CONFIG_CACHE_KEY = "CodeSee.recordingConfig";
var LOCAL_STORAGE_FAB_POSITION_KEY = "CodeSee.fabPosition";
/////////////////////////// TIMOUT CONSTANTS ///////////////////////////////////
var TRACK_ACROSS_PAGE_LOAD_TIMEOUT = 300000; // 5 minutes in ms
/////////////////////////// DATA VERBOSITY CONSTANTS ///////////////////////////
// NOT_RECORDING isn't really a data verbosity level, but it's grouped here
// because CodeSeeTrackerImpl.recording toggles between it and the verbosity
// levels. It's important that NOT_RECORDING be false in a boolean context
// vs. the verbosity levels, which must be true.
var NOT_RECORDING = 0;
var VERBOSITY_NO_DATA = 100;
var VERBOSITY_LOW_DATA = 500;
var VERBOSITY_MAX = 1000;
//////////////////////////////////// AUTH //////////////////////////////////////
var DEFAULT_USER_EMAIL = "non-user@internal";
var RTCE_SERVER_USER_ID = "rtce-server";
var OKTA_EXPECTED_AUDIENCE = "api://default";
var AUTH_DUMMY_TOKEN_SINGLE_USER = "<CodeSee:SingleUser>";
// When a user connects with SSO, but the identity provider
// does not return an email address, we shim in a fake
// email address with the following suffix.
var SSO_USER_FAKE_EMAIL_SUFFIX = "@githubtest.com";
var SCOPES = {
    API_TOKENS: {
        WRITE: "codesee.api_tokens.write",
        MANAGE: "codesee.api_tokens.manage",
    },
    RECORDINGS: {
        READ: "codesee.recordings.read",
        WRITE: "codesee.recordings.write",
        MANAGE: "codesee.recordings.manage",
    },
    STORIES: {
        READ: "codesee.stories.read",
        MANAGE: "codesee.stories.manage",
    },
    ARCH_DIAGRAMS: {
        READ: "codesee.arch_diagrams.read",
        MANAGE: "codesee.arch_diagrams.manage",
        WRITE: "codesee.arch_diagrams.write",
    },
};
var DEFAULT_SCOPES = [
    // OKTA Scopes
    "openid",
    "profile",
    "email",
    // CodeSee Scopes
    SCOPES.API_TOKENS.WRITE,
    SCOPES.API_TOKENS.MANAGE,
    SCOPES.RECORDINGS.READ,
    SCOPES.RECORDINGS.WRITE,
    SCOPES.RECORDINGS.MANAGE,
    SCOPES.STORIES.READ,
    SCOPES.STORIES.MANAGE,
    SCOPES.ARCH_DIAGRAMS.READ,
    SCOPES.ARCH_DIAGRAMS.MANAGE,
    SCOPES.ARCH_DIAGRAMS.WRITE,
];
/////////////////////// BACKEND/FRONTEND INTEGRATION ///////////////////////////
var AUTHORIZATION_HEADER_NAME = "X-CodeSee-Authorization";
var TRACING_HEADER_NAME = "X-CodeSee-Tracing";
var TRACING_HEADER_NAME_REGEX = /X-CodeSee-Tracing/i;
var TRACING_HEADER_FORMAT_COMPOSITE_SESSION_ID = "1";
var TRACING_HEADER_FORMAT_SIMPLE_SESSION_ID = "2";
/////////////////////// ERROR MESSAGES /////////////////////////////////////////
var MESSAGE_QUEUE_OVERFLOW = "queue overflow";
///////////////////// ERROR CODES ///////////////////
var SERVER_ERROR_CODES = {
    NO_GITHUB_APP_INSTALLATION: "NoGitHubAppInstallation",
    INVALID_BILLING_ACCOUNT_ID: "InvalidBillingAccountId",
    INSUFFICIENT_GH_PRIVILEGES_FIRST_MAP: "InsufficientGitHubPermissionsForFirstMap",
    INSUFFICIENT_GH_PRIVILEGES_SECOND_MAP: "InsufficientGitHubPermissionsForSecondMap",
    GITHUB_ACTIONS_NOT_ENABLED: "GitHubActionsNotEnabled",
    GITHUB_REPO_IS_ARCHIVED: "GitHubRepoIsArchived",
};
var GITHUB_ERROR_CODES = {
    AUTHOR_CANNOT_APPROVE: "AuthorCannotApprove",
    AUTHOR_CANNOT_REQUEST_CHANGES: "AuthorCannotRequestChanges",
    FORBIDDEN: "Forbidden",
    REVIEW_PENDING: "ReviewPending",
    // UNPROCESSABLE_ENTITY is our generic fallback code
    UNPROCESSABLE_ENTITY: "UnprocessableEntity",
};
/**
 * The default value for a GoJS.node.labelKey when it doesn't have a color
 */
var DEFAULT_GOJS_LABEL_KEY = "0";
var CODESEE_REGISTRATION_URL = "https://login.codesee.io/";
var CODESEE_RTCE_AUTOMATION_USERNAME = "CodeSee Automated Updater";
/**
 * Users can reach out to this email for support
 */
var CODESEE_SUPPORT_EMAIL = "support@codesee.io";
/**
 * URLs to the CodeSee docs
 */
var CODESEE_DOCS_URLS = {
    HOME: "https://docs.codesee.io",
    INSTALLATION: "https://docs.codesee.io/docs/installation",
    GETTING_STARTED: "https://docs.codesee.io/docs/getting-started",
    ONBOARDING_CRA: "https://docs.codesee.io/docs/configuring-recordings-with-create-react-app",
    ONBOARDING_TYPESCRIPT: "https://docs.codesee.io/docs/typescript-but-without-babel-installation",
    ONBOARDING_NUXT: "https://docs.codesee.io/docs/nuxtjs-installation",
    ONBOARDING_NEXT: "https://docs.codesee.io/docs/nextjs-installation",
    ONBOARDING_STORYBOOK: "https://docs.codesee.io/docs/storybook-installation",
    ONBOARDING_GATSBY: "https://docs.codesee.io/docs/gatsby-installation",
    ONBOARDING_EMBER: "https://docs.codesee.io/docs/ember-installation-instructions-experimental",
    ONBOARDING_GENERIC: "https://docs.codesee.io/docs/generic-installation",
    REVIEW_MAPS_GUIDE: "https://docs.codesee.io/docs/user-guide",
    CODEBASE_MAPS_LEARN_MORE: "https://docs.codesee.io/docs/codebase-maps",
    TRIGGERS_LEARN_MORE: "https://docs.codesee.io/docs/triggers-overview",
};
/**
 * URLs to the codesee learn website
 */
var CODESEE_LEARN_URLS = {
    HOME: "https://learn.codesee.io/",
    EXPLORE: "https://learn.codesee.io/types-of-codesee-maps-for-teams/#explore-learn-map-for-personal-onboarding",
    TEACH: "https://learn.codesee.io/types-of-codesee-maps-for-teams/#onboarding-map",
    OWNERSHIP: "https://learn.codesee.io/types-of-codesee-maps-for-teams/#ownership-map",
    REFACTOR: "https://learn.codesee.io/types-of-codesee-maps-for-teams/#technical-debt-map",
};

export { AUTHORIZATION_HEADER_NAME, AUTH_DUMMY_TOKEN_SINGLE_USER, AVAILABLE_INSIGHTS, Aqua, Black, Blue, BoxShadow, CODESEE_DOCS_URLS, CODESEE_LEARN_URLS, CODESEE_REGISTRATION_URL, CODESEE_RTCE_AUTOMATION_USERNAME, CODESEE_SUPPORT_EMAIL, DEFAULT_GOJS_LABEL_KEY, DEFAULT_SCOPES, DEFAULT_USER_EMAIL, FontStack, GITHUB_ERROR_CODES, INSIGHTS, Insight5StepColorScale, Insight6StepColorScale, InsightMode, LOCAL_STORAGE_AUTH_MODE_KEY, LOCAL_STORAGE_CONFIG_CACHE_KEY, LOCAL_STORAGE_FAB_POSITION_KEY, LOCAL_STORAGE_RECORDING_ID_KEY, LOCAL_STORAGE_RECORDING_TIMESTAMP, LOCAL_STORAGE_VERBOSE_KEY, LOCAL_STORAGE_WRITE_TOKEN_KEY, LegendDark, LegendLight, LegendTextColor, MESSAGE_QUEUE_OVERFLOW, Magenta, NOT_RECORDING, OKTA_EXPECTED_AUDIENCE, PRDiagramColor, PRReviewColors, Primary, RTCE_SERVER_USER_ID, SCOPES, SERVER_ERROR_CODES, SSO_USER_FAKE_EMAIL_SUFFIX, TRACING_HEADER_FORMAT_COMPOSITE_SESSION_ID, TRACING_HEADER_FORMAT_SIMPLE_SESSION_ID, TRACING_HEADER_NAME, TRACING_HEADER_NAME_REGEX, TRACK_ACROSS_PAGE_LOAD_TIMEOUT, VERBOSITY_LOW_DATA, VERBOSITY_MAX, VERBOSITY_NO_DATA, White, Yellow, tailwindConfig };
