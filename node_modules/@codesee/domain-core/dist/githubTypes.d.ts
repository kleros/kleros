export declare enum GitHubPullRequestReviewCommentState {
    Pending = "PENDING",
    Submitted = "SUBMITTED"
}
/**
 * A review comment associated with a pull request in GitHub.
 *
 * @see https://docs.github.com/en/graphql/reference/objects#pullrequestreviewcomment
 */
export declare type GitHubPullRequestReviewComment = {
    author: {
        login: string;
        avatarUrl: string;
    };
    authorAssociation: string;
    body: string;
    createdAt: string;
    commit: {
        oid: string;
    };
    /**
     * The databaseId is used to run operations on a comment with GitHub's REST
     * API. For operations performed with the GraphQL API, use the comment's id.
     */
    databaseId: number;
    diffHunk: string;
    id: string;
    originalCommit: {
        oid: string;
    } | null;
    state: GitHubPullRequestReviewCommentState;
    updatedAt: string;
    url: string;
    viewerCanDelete: boolean;
    viewerCanUpdate: boolean;
    viewerDidAuthor: boolean;
};
/**
 * A threaded list of GitHubPullRequestReviewComments for a given pull request
 * in GitHub.
 *
 * @see https://docs.github.com/en/graphql/reference/objects#pullrequestreviewthread
 */
export declare type GitHubPullRequestReviewThread = {
    comments: {
        nodes: GitHubPullRequestReviewComment[];
    };
    diffSide: GitHubCodeReviewCommentSide;
    id: string;
    isCollapsed: boolean;
    isOutdated: boolean;
    isResolved: boolean;
    resolvedBy: {
        login: string;
    } | null;
    viewerCanReply: boolean;
    viewerCanResolve: boolean;
    viewerCanUnresolve: boolean;
    line: number | null;
    originalLine: number | null;
    path: string;
};
/**
 * The possible sides of a diff in GitHub.
 *
 * @see https://docs.github.com/en/graphql/reference/enums#diffside
 */
export declare enum GitHubCodeReviewCommentSide {
    Left = "LEFT",
    Right = "RIGHT"
}
/**
 * @see https://docs.github.com/en/graphql/reference/enums#pullrequeststate
 */
export declare type GitHubPullRequestState = "OPEN" | "CLOSED" | "MERGED";
/**
 * @see https://docs.github.com/en/graphql/reference/enums#pullrequestreviewdecision
 */
export declare type GitHubPullRequestReviewDecision = "APPROVED" | "CHANGES_REQUESTED" | "REVIEW_REQUIRED";
export declare enum GitHubPullRequestReviewState {
    Commented = "COMMENTED",
    Approved = "APPROVED",
    Pending = "PENDING",
    ChangedRequested = "CHANGES_REQUESTED",
    Dismissed = "DISMISSED"
}
/**
 * @see https://docs.github.com/en/graphql/reference/enums#pullrequestreviewevent
 */
export declare enum GitHubPullRequestReviewEvent {
    Comment = "COMMENT",
    Approve = "APPROVE",
    RequestChanges = "REQUEST_CHANGES",
    Dismiss = "DISMISS"
}
/**
 * @see https://docs.github.com/en/graphql/reference/objects#pullrequestreview
 */
export declare type GitHubPullRequestReview = {
    author: {
        avatarUrl: string;
        login: string;
    };
    body: string;
    state: GitHubPullRequestReviewState;
    id: string;
    databaseId: number;
    updatedAt: string;
    createdAt: string;
    comments: {
        nodes: GitHubPullRequestReviewComment[];
    };
};
/**
 * @see https://docs.github.com/en/graphql/reference/input-objects#draftpullrequestreviewthread
 */
export declare type GitHubDraftPullRequestReviewThread = {
    body: string;
    line: number;
    path: string;
    side?: GitHubCodeReviewCommentSide;
    startLine?: number;
    startSide?: GitHubCodeReviewCommentSide;
};
export declare type GitHubAddPullRequestReviewThreadInput = {
    /**
     * Body of the thread's first comment.
     */
    body: string;
    /**
     * The line of the blob to which the thread refers. The end of the line range
     * for multi-line comments.
     */
    line: number;
    /**
     * Path to the file being commented on.
     */
    path: string;
    /**
     * The node ID of the pull request being reviewed.
     */
    pullRequestId?: string;
    /**
     * The Node ID of the review to modify.
     */
    pullRequestReviewId?: string;
    /**
     * The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
     */
    side?: GitHubCodeReviewCommentSide;
    /**
     * The first line of the range to which the comment refers.
     */
    startLine?: number;
    /**
     * The side of the diff on which the start line resides.
     */
    startSide?: GitHubCodeReviewCommentSide;
};
export declare type GitHubAddPullRequestReviewCommentInput = {
    body: string;
    clientMutationId?: string;
    commitOID?: string;
    inReplyTo?: string;
    path?: string;
    position?: number;
    pullRequestId?: string;
    pullRequestReviewId?: string;
};
export declare enum GitHubFileStatus {
    Added = "added",
    Modified = "modified",
    Renamed = "renamed",
    Removed = "removed",
    Unchanged = "unchanged"
}
declare type GitHubFileBase = {
    filename: string;
    sha: string;
    additions: number;
    changes: number;
    deletions: number;
    blob_url: string;
    contents_url: string;
    raw_url: string;
    previous_filename?: string;
    content?: string;
};
declare type GitHubFileRenamed = {
    status: GitHubFileStatus.Renamed;
    previous_filename: string;
    patch?: string;
} & GitHubFileBase;
declare type GitHubFileAdded = {
    status: GitHubFileStatus.Added;
    patch: string;
} & GitHubFileBase;
declare type GitHubFileModified = {
    status: GitHubFileStatus.Modified;
    patch: string;
} & GitHubFileBase;
declare type GitHubFileRemoved = {
    status: GitHubFileStatus.Removed;
    patch: string;
} & GitHubFileBase;
declare type GitHubFileUnchanged = {
    status: GitHubFileStatus.Unchanged;
    filename: string;
    patch?: string;
} & Partial<GitHubFileBase>;
export declare type GitHubFile = GitHubFileAdded | GitHubFileModified | GitHubFileRemoved | GitHubFileRenamed | GitHubFileUnchanged;
export {};
