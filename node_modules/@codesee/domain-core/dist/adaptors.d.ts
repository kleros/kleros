import { ArchDiagramNode, LabelConfig, ArchDiagramLink, ServerBlob } from "./ArchDiagram";
import type { Node as ArchDiagramRawNode } from "./types";
import { TourCollection } from "./index";
export declare class ArchDiagramServerAdaptor {
    static toServerObject(nodes: ArchDiagramNode[], links: ArchDiagramLink[], labels: LabelConfig[], tours: TourCollection): ServerBlob;
    /**
     * Given a list of of string path node keys like ["src/parser/index.js"],
     * Inflate the keys into ArchDiagramRawNodes, create a list of
     * ArchDiagramRawNodes representing the parent groups that will contain
     * the newly inflated nodes, and return a list containing all of these.
     * @param {string[]} nodeKeys
     * @returns {ArchDiagramRawNode[]}
     */
    static nodeKeysToNodes(nodeKeys: string[]): ArchDiagramRawNode[];
    /**
     * Given a string path node key like "src/parser/index.js",
     * Return a corresponding ArchDiagramRawNode object.
     * @param {string} nodeKey
     * @returns {ArchDiagramRawNode}
     */
    static _nodeKeyToNode(nodeKey: string): ArchDiagramRawNode;
    /**
     * Given a list of string path node keys like ["src/parser/index.js"]
     * Create a list of nodes representing the parent groups that
     * will contain the nodes with the input keys.
     * @param {string[]} nodeKeys
     * @returns {ArchDiagramRawNode[]}
     */
    static _generateParentGroups(nodeKeys: string[]): ArchDiagramRawNode[];
    static fromServerObject(blob: ServerBlob): {
        nodeData: ArchDiagramNode[];
        linkData: ArchDiagramLink[];
        labelData: LabelConfig[];
        tourData: TourCollection;
    };
}
