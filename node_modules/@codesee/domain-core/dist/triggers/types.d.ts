import { Octokit } from "@octokit/core";
import type { FileChange, TriggerAction, TriggerActionKind, TriggerCondition } from "../endpointTypes/triggers";
export declare type uuid = string;
export declare type TriggerHistoryRow = {
    id: string;
    trigger_id: uuid;
    change_id: string;
    timestamp: Date;
    metadata: ActionKindToActionIdToMetadata | null;
};
export declare type PRMetadata = {
    baseOrigin: string;
    owner: string;
    repo: string;
    number: number;
    body: string | null;
};
export declare type ActionKindToActionIdToMetadata = {
    [key in TriggerActionKind]?: ActionIdToMetadata;
};
export declare type AddToChecklistItem = {
    checked: boolean;
    content: string;
    id: uuid;
};
export declare type Checklist = {
    items: AddToChecklistItem[];
    myTriggerUrl: string;
};
export declare type TriggerIdToChecklist = {
    [key: string]: Checklist;
};
export declare type ExecuteAllActionsOptions = {
    triggerIdToActions: TriggerIdToActions;
    triggerIdToMostRecentMetadata: Map<uuid, ActionKindToActionIdToMetadata>;
    prMetadata: PRMetadata;
    allTriggersUrl: string;
    appOctokit: Octokit;
    log: any;
};
export declare type ExecuteAllActionsFunction = (options: ExecuteAllActionsOptions) => Promise<ExecuteAllActionsResult>;
export declare type BodyCommentSentinel = "body";
export declare type AddToChecklistMetadata = {
    commentId: string | BodyCommentSentinel;
};
export declare type AddCommentMetadata = {
    commentId: string;
};
export declare type ActionMetadata = AddCommentMetadata | AddToChecklistMetadata;
interface SpecificActionMetadata {
    [key: string]: ActionMetadata;
}
export declare const allActionsSentinel = "*";
interface AllActionsMetadata {
    [allActionsSentinel]?: ActionMetadata;
}
export declare type ActionIdToMetadata = SpecificActionMetadata & AllActionsMetadata;
export declare type ExecuteAllActionsResult = {
    messages: string[];
    metadata: Map<uuid, ActionIdToMetadata>;
};
export interface ActionAPI {
    shouldAlwaysPerform: boolean;
    executeActions: ExecuteAllActionsFunction;
}
export declare type TriggerActionForExecution = TriggerAction & {
    api: ActionAPI;
    triggerId: string;
    triggerUrl: string;
};
export declare type TriggerIdToActions = {
    [key: string]: TriggerActionForExecution[];
};
export declare type CollectedTriggerActions = {
    [key in TriggerActionKind]?: TriggerIdToActions;
};
export declare type FileChangeMatcher = (fileChange: FileChange) => boolean;
export declare type TriggerRow = {
    id: string;
    billing_account_id: string;
    user_id: string;
    repo_origin: string;
    name: string;
    enabled: boolean;
    apply_to_drafts: boolean;
    conditions: TriggerCondition[];
    actions: TriggerAction[];
    created: Date;
};
export declare type TriggerHistoryItem = {
    triggerId: string;
    pullRequestUrl: string;
    timestamp: string;
};
export {};
