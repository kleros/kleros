import { BillingPlan } from "../billing-plan-features";
import { UserSetting_NavigationPreferences, UserSetting_OnboardingChecklist } from "../shared-types/user-settings";
import { AccountRole, ActiveMember, InvitedMember } from "../shareTypes";
import { MalformedRequest } from "./errors";
export declare enum SubscriptionSessionTypes {
    Checkout = "create-checkout-session",
    Manage = "create-customer-portal-session"
}
export declare enum SubscriptionStatus {
    Active = "active",
    PastDue = "past_due",
    Unpaid = "unpaid",
    Canceled = "canceled",
    Incomplete = "incomplete",
    IncompleteExpired = "incomplete_expired",
    Trialing = "trialing"
}
export declare const SubscriptionStatusGoodStanding: Set<SubscriptionStatus>;
export declare const SubscriptionStatusNeedsAttention: Set<SubscriptionStatus>;
export declare type AccountsListResponse = {
    success: true;
    status: 200;
    accounts: Account[];
};
export declare type AccountsSelfEnrollListResponse = {
    success: true;
    status: 200;
    accounts: AccountSelfEnroll[];
};
/**
 * If the user doesn't have a billing subscription we return null for the number of seats
 */
export declare type NumberOfSeats = number | null;
export declare type Account = {
    id: string;
    name: string;
    role: AccountRole;
    billingPlan: BillingPlan;
    subscriptionStatus: SubscriptionStatus | null;
    hasBillingCustomerId: boolean;
    seatsUsed: NumberOfSeats;
    seatsTotal: NumberOfSeats;
    created: string;
};
export declare type AccountSelfEnroll = Omit<Account, "role"> & {
    role: null;
};
/**
 * Request and response for "I want to learn about the Enterprise Plan"
 */
export declare type EnterpriseInquiryRequestBody = {
    email: string;
    numberOfEngineers: string;
};
export declare type EnterpriseInquiryResponse = {
    success: boolean;
};
/**
 * Response to request for billing account members
 */
export declare type AccountMembersResponse = AccountWithMembers | AccountError;
export declare type AccountWithMembers = {
    id: string;
    billingPlan: BillingPlan;
    hasBillingCustomerId: boolean;
    name: string;
    members: AccountMember[];
};
/**
 * Response to PUT request to update an account member
 */
export declare type UpdateAccountMemberResponse = AccountMember | AccountError;
/**
 * Response to DELETE request to delete an account member
 */
export declare type DeleteAccountResponse = AccountSuccess | AccountError;
export declare type AccountError = {
    success: false;
    status: 400;
    message: "Malformed request";
} | {
    success: false;
    status: 404;
    message: "Resource not found";
} | {
    success: false;
    status: 500;
    message: "Something went wrong. Please try again.";
};
declare type AccountSuccess = {
    success: true;
};
export declare type AccountInvitedMember = InvitedMember<{
    role: AccountRole;
}>;
export declare type AccountActiveMember = ActiveMember<{
    role: AccountRole;
}>;
export declare type AccountMember = AccountInvitedMember | AccountActiveMember;
/**
 * Payload to add a list of members to a billing account
 * @see accounts.ts
 */
export declare type AddMembersToAccountPayload = {
    role: AccountRole;
    userEmails: string[];
};
/**
 * Payload to self-enroll current user to billing accounts
 */
export declare type AddSelfToAccountsPayload = {
    accountIds: string[];
};
export declare type CreateAccountPayload = {
    name: string;
    billingPlan: BillingPlan;
};
export declare type UpdateAccountPayload = {
    billingPlan?: BillingPlan;
    name?: string;
};
export declare type MigrateAccountsPayload = {
    repoCollections: string[];
};
export declare type OnboardingCheckListResponse = {
    success: true;
    status: 200;
    data: UserSetting_OnboardingChecklist;
} | MalformedRequest;
export declare type GeneralSettingsResponse = {
    success: true;
    status: 200;
    data: UserSetting_NavigationPreferences;
} | MalformedRequest;
export {};
