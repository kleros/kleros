export declare type Repo = {
    name: string;
    account: string;
    mapCount: number;
    lastSync: number | null;
    installed: boolean;
    accountType: GithubAccountType;
    accountInstallationId: number;
    accountIsAdmin?: boolean;
    origin: string;
};
export declare enum GithubAccountType {
    User = "User",
    Organization = "Organization"
}
export declare enum RepoInstallStatus {
    Unknown = "Unknown",
    AttentionMergePullRequest = "AttentionMergePullRequest",
    Queued = "Queued",
    Working = "Working",
    Completed = "Completed",
    Installed = "Installed",
    WarningLongTimeWorking = "WarningLongTimeWorking",
    ErrorNeverStarted = "ErrorNeverStarted",
    ErrorCompleteButNoData = "ErrorCompleteButNoData"
}
export declare type ReposWithInstallStatuses = {
    status: 200;
    repos: RepoOriginAndStatus[];
};
export declare type ReposTaskStatus = {
    success: true;
} | {
    success: false;
    errorCode: RepoUpdatedInstallStatusErrorCode | "UnsupportedTaskType";
};
export declare type RepoOriginAndStatus = {
    origin: string;
    installStatus: RepoInstallStatus;
    isPublic: boolean;
    pullRequestNumber: string | null;
};
export declare enum RepoUpdatedInstallStatusErrorCode {
    UnableToUseAppOctokit = "UnableToUseAppOctokit",
    UnableToQueryGitHub = "UnableToQueryGitHub",
    InvalidRepoOrigin = "InvalidRepoOrigin"
}
export declare type RepoUpdatedInstallStatusResponse = {
    success: false;
    errorCode: RepoUpdatedInstallStatusErrorCode;
    isCliRunnerProvisionedRepo?: boolean;
} | RepoUpdatedInstallStatusResponseSuccess;
export declare type RepoUpdatedInstallStatusResponseSuccess = {
    success: true;
    isCliRunnerProvisionedRepo?: boolean;
} & RepoOriginAndStatus;
export declare type RepoFiles = {
    /**
     * An array of file paths
     */
    files: string[];
    /**
     * An array of folder paths
     */
    folders: string[];
};
