import { GitHubPullRequestState, GitHubPullRequestReviewDecision } from "../githubTypes";
export declare type GitHubPullRequestFilters = {
    needsReviewFromSelf?: boolean;
    authorIsSelf?: boolean;
    assignedToSelf?: boolean;
};
export declare type GitHubPullRequestInfo = {
    author: {
        login: string;
    };
    comments: {
        totalCount: number;
    };
    createdAt: string;
    isDraft: boolean;
    isReadByViewer: boolean;
    number: number;
    repository: {
        nameWithOwner: string;
    };
    reviewDecision: GitHubPullRequestReviewDecision;
    state: GitHubPullRequestState;
    title: string;
};
/**
 * Extend the GitHubPullRequestInfo type with some CodeSee-specific data
 */
export declare type ReviewMapInfo = GitHubPullRequestInfo & {
    hasTour: boolean;
};
export declare type ListReviewMapsResponseBody = {
    pullRequests: ReviewMapInfo[];
    repositories: string[];
};
export declare type MentionSuggesterUser = {
    type: "user";
    login: string;
    name?: string;
    id: number;
};
export declare type MentionSuggesterTeam = {
    type: "team";
    name: string;
    description: string;
    id: number;
};
export declare type MentionSuggestion = MentionSuggesterTeam | MentionSuggesterUser;
export declare type MentionSuggesterError = {
    success: false;
    message: string;
};
export declare type MentionSuggesterResponseBody = {
    success: true;
    suggestions: MentionSuggestion[];
} | MentionSuggesterError;
export declare type RepoCollaborator = {
    login: string;
    id: number;
    avatarUrl?: string;
};
/**
 * Shape of a GitHub team object
 */
export declare type RepoTeam = {
    id: number;
    slug: string;
    name: string;
    description?: string;
};
